openapi: 3.0.0
info:
  description: "JBS api document"
  version: "1.0.0"
  title: "JBS API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "lhj1982@gmail.com"
  license:
    name: MIT
tags:
- name: "oauth"
  description: "User authentication and authorization"
- name: "script"
  description: "Access to scripts"
- name: "shop"
  description: "Access to shop"
- name: "event"
  description: "Access to script events"
- name: "user"
  description: "Operations about user"

servers:
  - url: http://localhost:3000
    description: Optional server description, e.g. Internal staging server for testing
  - url: http://jbs.weijinglong.com:3000
    description: Optional server description, e.g. Main (production) server
    

paths:
  /oauth/login:
    post:
      tags:
      - oauth
      summary: "Authorize user"
      description: ""
      operationId: "authrozieUser"
      requestBody: 
        description: Request content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OauthLogin'
      responses:
        200:
          description: "Success"
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/OauthResponse'
        default:
          description: "Invalid input"
          
  /scripts:
    get:
      tags:
      - "script"
      summary: "List all scripts"
      operationId: "listScripts"
      parameters:
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The numbers of items to return
          schema:
            type: integer
        - in: query
          name: keyword
          description: Search keyword
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptsResponse'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - "script"
      summary: "Create a new script"
      operationId: "createScript"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - key
                - name
                - description
                - duration
                - minNumberOfPersons
                - maxNumberOfPersons
                - introImage
                - estimatedPrice
              properties:
                key:
                  type: string
                name:
                  type: string
                description:
                  type: string
                minNumberOfPersons:
                  type: integer
                  format: int32
                maxNumberOfPersons:
                  type: integer
                  format: int32
                duration:
                  type: integer
                  format: int32
                introImage:
                  type: string
                estimatedPrice:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          
  /scripts/{id}:
    get:
      tags:
      - "script"
      summary: "Get one script by id"
      operationId: "getScriptById"
      parameters:
        - in: path
          name: id
          description: script id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        default:
          description: 'Default response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  
  /shops:
    get:
      tags:
      - "shop"
      summary: "List all shops"
      operationId: "listShops"
      parameters:
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
        - in: query
          name: limit
          description: The numbers of items to return
          schema:
            type: integer
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopsResponse'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - "shop"
      summary: "Add new shop"
      operationId: "AddShop"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              required:
                - name
                - key
                - address
                - mobile
                - contactName
                - contactMobile
                - city
              properties:
                name:
                  type: "string"
                key:
                  type: "string"
                address:
                  type: "string"
                mobile:
                  type: "string"
                wechatId:
                  type: "string"
                wechatName:
                  type: "string"
                contactName:
                  type: "string"
                contactMobile:
                  type: "string"
                province:
                  type: "integer"
                district:
                  type: "integer"
                city:
                  type: "string"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          
  /shops/{id}:
    get:
      tags:
      - "shop"
      summary: "Get one shop by id"
      operationId: "getShopById"
      parameters:
        - in: path
          name: id
          description: shop id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
                
  /shops/{shopId}/script/{scriptId}:
    post:
      tags:
      - "shop"
      summary: "Add one script to a shop"
      operationId: "addSingleShopScript"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: shopId
          required: true
          description: shop id
          schema:
            type: string
        - in: path
          name: scriptId
          required: true
          description: script id
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          
  /events:
    get:
      tags:
      - "event"
      summary: "List all events"
      operationId: "listEvents"
      parameters:
        - in: query
          name: offset
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          description: The numbers of items to return
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - "event"
      summary: "Add new event"
      operationId: "addEvent"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: event body
        content:
          application/json:
            schema:
              type: "object"
              required:
                - shopId
                - scriptId
                - startTime
                - endTime
                - hostUserId
                - numberOfPersons
                - price
              properties:
                shopId:
                  type: "string"
                scriptId:
                  type: "string"
                startTime:
                  type: "string"
                  format: 'date-time'
                endTime:
                  type: "string"
                  format: 'date-time'
                hostUserId:
                  type: "string"
                hostComment:
                  type: "string"
                numberOfPersons:
                  type: "integer"
                  format: int32
                  minimum: 1
                  maximum: 20
                numberOfOfflinePersons:
                  type: "integer"
                  format: "int32"
                  minimum: 0
                price:
                  type: "integer"
                  format: int32
              example:
                shopId: '1234'
                scriptId: '1234'
                startTime: '2019-01-01 12:00:00'
                endTime: '2019-01-01 12:00:00'
                hostUserId: '2323'
                numberOfPersons: 1
                numberOfOfflinePersons: 0
                price: 100
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  
  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Get an event detail info"
      operationId: "getEventById"
      parameters:
        - in: path
          name: eventId
          description: event id
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetails'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - "event"
      summary: "Update a given event"
      operationId: "updateEventById"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          description: event id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: content body
        content:
          application/json:
            schema:
              type: "object"
              properties:
                status:
                  type: "string"
                  enum:
                    - ready
                    - complete
                    - expired
                    - cancelled
                numberOfOfflinePersons:
                  type: "integer"
                  format: "int32"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /events/calendar/{date}:
    get:
      tags:
      - "event"
      summary: "Get events list by given date"
      operationId: "getEventsByDate"
      parameters:
        - in: path
          name: date
          description: local date, format: YYYY-MM-DD
          required: true
          schema:
            type: string
            format: date
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfEvents'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /events/{eventId}/join:
    post:
      tags:
      - "event"
      summary: "User join a given event"
      operationId: "joinEvent"
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        description: join event request body
        content:
          application/json:
            schema:
              type: "object"
              required:
                - source
                - mobile
              properties:
                source:
                  type: "string"
                  enum:
                    - online
                    - offline
                mobile:
                  type: "string"
      parameters:
        - in: path
          name: eventId
          required: true
          description: event id
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUser'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /events/{eventId}/users/cancel:
    put:
      tags:
      - "event"
      summary: "Cancel a user event"
      description: "User choose not to join a given event"
      operationId: "cancelEventUser"
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        description: cancel user event request body
        content:
          application/json:
            schema:
              type: "object"
              required:
                - userId
                - status
              properties:
                status:
                  type: "string"
                  enum:
                    - cancelled
                userId:
                  type: "string"
      parameters:
        - in: path
          name: eventId
          required: true
          description: event id
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUser'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'


  /events/{eventId}/users/update-status:
    put:
      tags:
      - "event"
      summary: "Update a user event status"
      description: "Orgnizer can update a user event status to paid/unpaid"
      operationId: "updateEventUserStatus"
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        description: update user event status request body
        content:
          application/json:
            schema:
              type: "object"
              required:
                - userId
                - status
              properties:
                status:
                  type: "string"
                  enum:
                    - paid
                    - unpaid
                    - cancelled
                userId:
                  type: "string"
      parameters:
        - in: path
          name: eventId
          required: true
          description: event id
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUser'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

      

  /events/price-schema:
    get:
      tags:
      - "event"
      summary: "Retrieve price schema of event"
      description: "Retrieve price schema of event"
      operationId: "getEventPriceSchema"
      parameters:
        - in: query
          name: scriptId
          description: script id
          schema:
            type: string
        - in: query
          name: shopId
          required: true
          description: shopId
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceWeeklySchema'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /events/discount-rules:
    get:
      tags:
      - "event"
      summary: "Retrieve discount rulesle of am event"
      description: "Retrieve discount rulesle of am event"
      operationId: "getEventDiscountRules"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: scriptId
          description: script id
          schema:
            type: string
        - in: query
          name: shopId
          required: true
          description: shopId
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoutRules'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      security:
        - bearerAuth: []
      requestBody:
        description: "Created user request object"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{userId}:
    put:
      tags:
      - "user"
      summary: "Update a user"
      description: "Update a single user."
      operationId: "updateUser"
      security:
        - bearerAuth: []
      requestBody:
        description: "Update user request object"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                description:
                  type: "string"
                mobile:
                  type: "string"
                wechatId:
                  type: "string"
                email:
                  type: "string"
                avatarImage:
                  type: "string"
      parameters:
        - in: path
          name: userId
          required: true
          description: user id
          schema:
            type: string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /profile:
    get:
      tags:
      - "user"
      summary: "Get current user profile"
      description: "Get current user profile."
      operationId: "getProfile"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  
  /profile/my-events:
    get:
      tags:
      - "user"
      summary: "Get event list joined by logged in user"
      description: "Get event list joined by logged in user."
      operationId: "getMyEvents"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfEventUsers'
        default:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    OauthLogin:
      type: "object"
      properties:
        code:
          type: "string"
        type:
          type: "string"
          enum:
            - wxapp
        nickName:
          type: "string"
      example:
        code: '1234'
        type: 'wxapp'
        nickName: 'test'
    
    OauthResponse:
      type: "object"
      properties:
        openId:
          type: "string"
        accessToken:
          type: "string"
        user:
          type: "object"
          $ref: '#/components/schemas/User'

    Permission:
      type: "object"
      properties:
        domain:
          type: "string"
        operations:
          type: "array"
          items:
            type: "string"
      example:
        domain: "user"
        operations:
          - read
          - write

    Role:
      type: "object"
      properties:
        name:
          type: "string"
          enum: ["admin", "user", "orgnizer"]
        permissions:
          type: "array"
          items:
            $ref: '#/components/schemas/Permission'

    User:
      type: "object"
      properties:
        id:
          type: "string"
        openId:
          type: "string"
        unionId:
          type: "string"
        nickName:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        mobile:
          type: "string"
        wechatId:
          type: "string"
          description: "User wechat id"
        avatarImage:
          type: "string"
          description: "User avatar image url"
        roles:
          type: "array"
          items:
            type: "object"
            $ref: '#/components/schemas/Role'
      xml:
        name: "User"
    
    Script:
      type: "object"
      properties:
        id:
          type: "string"
        key:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        minNumberOfPersons:
          type: "integer"
        maxNumberOfPersons:
          type: "integer"
        duration:
          type: "integer"
        introImage:
          type: "string"
        estimatedPrice:
          type> "string"
        createdAt: 
          type: "string"
          format: "date-time"
        tags:
          type: "array"
          items:
            type: "string"
        shops:
          type: "array"
          items:
            $ref: '#/components/schemas/Shop'
    
    ArrayOfScripts:
      type: "array"
      items:
        $ref: '#/components/schemas/Script'
    
    ScriptsResponse:
      allOf: 
        - $ref: '#/components/schemas/PaginatedDataResponse'
        - 
          type: "object"
          properties:
            data:
              $ref: '#/components/schemas/ArrayOfScripts'
              
    Shop:
      type: "object"
      properties:
        id:
          type: "string"
        key:
          type: "string"
        name:
          type: "string"
        address:
          type: "string"
        mobile:
          type: "string"
        phone:
          type: "string"
        wechatId:
          type: "string"
        wechatName:
          type: "string"

    
    ArrayOfShops:
      type: "array"
      items:
        $ref: '#/components/schemas/Shop'
    
    ShopsResponse:
      allOf: 
        - $ref: '#/components/schemas/PaginatedDataResponse'
        - 
          type: "object"
          properties:
            data:
              $ref: '#/components/schemas/ArrayOfShops'  
    
    EventPrice:
      type: "object"
      properties:
        weekdayDayPrice:
          type: "integer"
        weekdayNightPrice:
          type: "integer"
        weekendPrice:
          type: "integer"
    Event:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        startTime:
          type: "string"
        endTime:
          type: "string"
        hostUser:
          type: "object"
          $ref: '#/components/schemas/User'
        script:
          type: "object"
          $ref: '#/components/schemas/Script'
        shop:
          type: "object"
          $ref: '#/components/schemas/Shop'
        numberOfPersons:
          type: "integer"
          format: "int32"
        numberOfOfflinePersons:
          type: "integer"
          format: "int32"
        numberOfParticipators:
          type: "integer"
          format: "int32"
        numberOfAvailableSpots:
          type: "integer"
          format: "int32"
        hostComment:
          type: "string"
        price:
          type: "integer"
          format: "int32"


    EventDetails:
      allOf: 
        - $ref: '#/components/schemas/Event'
        - 
          type: object
          properties:
            priceWeeklySchema:
              type: array
              items:
                $ref: '#/components/schemas/PriceWeeklySchema'
            discountRules:
              type: array
              items:
                $ref: '#/components/schemas/DiscoutRules'
            members:
              type: array
              items:
                $ref: '#/components/schemas/EventUser'
    
    PriceSchema:
      type: object
      properties:
        timeSpan:
          type: array
          items:
            type: string
            description: "time format, HH:MM"
        days:
          type: array
          items:
            type: string
            enum: [1,2,3,4,5,6,7]
        price:
          type: integer
          format: int32
          
    PriceWeeklySchema:
      type: object
      properties:
        script:
          type: object
          $ref: '#/components/schemas/Script'
        shop:
          type: object
          $ref: '#/components/schemas/Shop'
        priceSchema:
          type: array
          items:
            $ref: '#/components/schemas/PriceSchema'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        script:
          _id: "1234"
          key: "key"
        shop:
          _id: "4567"
          key: "key"
        priceSchema:
          - 
            timeSpan: 
              - "08:00"
              - "10:00"
            days:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
            price: 100
          -
            timeSpan: 
              - "20:00"
            days:
              - 6
              - 7
            price: 150
            
    DiscoutRules:
      type: object
      properties:
        key:
          type: string
        title:
          type: string
        description: 
          type: string
        timeSpan:
          type: array
          items:
            type: object
            properties:
              from: 
                type: string
                description: "HH:MM"
              to:
                type: string
                description: "HH:MM"
        days:
          type: array
          description: Days to which rules are applied
          items:
            type: string
            enum: [1,2,3,4,5,6,7]
        discount:
          type: object
          properties:
            sponsor:
              type: integer
              format: int32
            participator:
              type: integer
              format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        key: "rule1"
        title: "工作日晚场，开团“免费”，参团九折"
        description: "工作日晚场，发起者返 0.1*人数*原价，参与者返 0.1*原价"
        timeSpan:
        - 
          from: 17:00
          to: 23:59
        days:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
        discount:
          sponsor: 10
          participator: 10

    ArrayOfEvents:
      type: "array"
      items:
        $ref: '#/components/schemas/Event'
    
    EventsResponse:
      allOf: 
        - $ref: '#/components/schemas/PaginatedDataResponse'
        - 
          type: "object"
          properties:
            data:
              $ref: '#/components/schemas/ArrayOfEvents'

    ArrayOfEventUsers:
      type: array
      items:
        $ref: '#/components/schemas/EventUser'

    EventUser:
      type: "object"
      properties:
        id:
          type: "string"
        event:
          type: object
          $ref: '#/components/schemas/Event'
        user:
          type: "string"
          $ref: '#/components/schemas/User'
        userName:
          type: "string"
        mobile:
          type: "string"
        source:
          type: "string"
          enum: [online, offline]
        paid:
          type: "boolean"
        createdAt:
          type: "string"
          format: "date-time"
      
    PaginatedDataResponse:
      type: "object"
      properties:
        code:
          type: "string"
        pagination:
          type: "object"
          properties:
            offset:
              type: "integer"
            limit:
              type: "integer"
            total:
              type: "integer"
        links:
          type: "object"
          properties:
            next:
              type: "string"
            prev:
              type: "string"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Response code, for example, SUCCESS/FAIL"
        message:
          type: "string"
          description: "Error message, if any"
        data:
          type: "string"
    UnauthorizedError:
      description: Access token is missing or invalid
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"